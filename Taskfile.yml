version: '3'

# Modular Taskfile - Core functionality with optional extensions
includes:
  # Core repository health and CI tasks (always included)
  core:
    taskfile: ./taskfiles/Core.yml
    dir: .
  
  # Language and technology-specific extensions (optional)
  python:
    taskfile: ./taskfiles/Python.yml
    optional: true
    aliases: [py]
  
  protobuf:
    taskfile: ./taskfiles/Protobuf.yml
    optional: true
    aliases: [proto, pb]

vars:
  REPO_OWNER:
    sh: ./scripts/task/detect-repo.sh | grep REPO_OWNER | cut -d= -f2
  REPO_NAME:
    sh: ./scripts/task/detect-repo.sh | grep REPO_NAME | cut -d= -f2
  SCORECARD_RESULTS: scorecard-results.json
  
  # Environment configuration
  NETWORKS:
    - internal
    - public
  ENVIRONMENTS:
    - dev
    - staging
    - prod
  SERVICES:
    - api

tasks:
  default:
    desc: List all available tasks across modules
    cmds:
      - task --list

  # Delegate core tasks to the core module
  ci:
    desc: Run CI pipeline locally with act
    cmds:
      - task core:ci

  scorecard:
    desc: Run OSSF Scorecard security analysis
    cmds:
      - task core:scorecard

  sync:
    desc: Sync repository references with git remote
    cmds:
      - task core:sync

  init:
    desc: Initialize repository with proper permissions
    cmds:
      - task core:init

  # Composite tasks that work across modules
  setup:
    desc: Setup complete development environment (core + detected languages)
    cmds:
      - task core:setup
      - |
        echo "Setting up language-specific environments..."
        if [ -f requirements.txt ] || [ -f pyproject.toml ] || [ -f setup.py ]; then
          echo "Python project detected - setting up Python environment"
          task python:setup-python 2>/dev/null || echo "Python tasks not available"
        fi
      - |
        if [ -d proto ] || find . -name "*.proto" | head -1 | grep -q .; then
          echo "Protocol Buffers detected - setting up protobuf environment"
          task protobuf:setup-protobuf 2>/dev/null || echo "Protobuf tasks not available"
        fi
      - echo "Development environment setup completed"

  test:
    desc: Run all available tests (core + language-specific)
    cmds:
      - |
        echo "Running comprehensive test suite..."
        # Run Python tests if available
        if [ -f requirements.txt ] || [ -f pyproject.toml ]; then
          task python:test 2>/dev/null || echo "Python tests not available"
        fi
        echo "All tests completed"

  lint:
    desc: Run all linting tools (core + language-specific)
    cmds:
      - |
        echo "Running comprehensive linting..."
        # Run Python linting if available
        if [ -f requirements.txt ] || [ -f pyproject.toml ]; then
          task python:lint 2>/dev/null || echo "Python linting not available"
        fi
        # Run protobuf linting if available  
        if [ -d proto ] || find . -name "*.proto" | head -1 | grep -q .; then
          task protobuf:lint-proto 2>/dev/null || echo "Protobuf linting not available"
        fi
        echo "All linting completed"

  format:
    desc: Format all code (language-specific formatters)
    cmds:
      - |
        echo "Formatting all code..."
        # Format Python code if available
        if [ -f requirements.txt ] || [ -f pyproject.toml ]; then
          task python:format 2>/dev/null || echo "Python formatting not available"
        fi
        # Format protobuf files if available
        if [ -d proto ] || find . -name "*.proto" | head -1 | grep -q .; then
          task protobuf:format-proto 2>/dev/null || echo "Protobuf formatting not available"
        fi
        echo "All formatting completed"

  clean:
    desc: Clean all build artifacts and generated files
    cmds:
      - |
        echo "Cleaning all artifacts..."
        # Clean Python artifacts if available
        if [ -f requirements.txt ] || [ -f pyproject.toml ]; then
          task python:clean 2>/dev/null || echo "Python cleanup not available"
        fi
        # Clean protobuf artifacts if available
        if [ -d proto ] || find . -name "*.proto" | head -1 | grep -q .; then
          task protobuf:clean-all 2>/dev/null || echo "Protobuf cleanup not available"
        fi
        # Clean core artifacts
        rm -f {{.SCORECARD_RESULTS}}
        rm -f report.md
        echo "All cleanup completed"

  # Health check that includes all modules
  check:
    silent: true
    desc: Run comprehensive checks (core health + language-specific)
    cmds:
      - task core:check-tools
      - task core:scorecard-local
      - |
        # Run Python checks if available
        if [ -f requirements.txt ] || [ -f pyproject.toml ]; then
          task python:check 2>/dev/null || echo "Python checks not available"
        fi
        # Run protobuf checks if available
        if [ -d proto ] || find . -name "*.proto" | head -1 | grep -q .; then
          task protobuf:check-proto 2>/dev/null || echo "Protobuf checks not available"  
        fi
        echo "Comprehensive checks completed"

  # Environment-specific tasks (multi-environment support)
  check-envs-exist:
    desc: Check if GitHub environments exist
    silent: true
    run: when_changed
    sources:
      - Taskfile.yml
    generates:
      - /tmp/task-env-state
    cmds:
      - |
        envs="{{range .NETWORKS}}{{$network := .}}{{range $.ENVIRONMENTS}}{{$network}}-{{.}} {{end}}{{end}}"
        echo "Checking environments: $envs"
        ./scripts/task/check-environments.sh $envs

  check-secrets:
    desc: Check repository and environment secrets
    silent: true
    deps: [check-envs-exist]
    run: when_changed
    sources:
      - /tmp/task-env-state
      - Taskfile.yml
    cmds:
      - |
        envs="{{range .NETWORKS}}{{$network := .}}{{range $.ENVIRONMENTS}}{{$network}}-{{.}} {{end}}{{end}}"
        echo "Checking secrets for environments: $envs"
        ./scripts/task/check-secrets.sh $envs

  # Comprehensive health check with modular support
  doctor:
    desc: Complete repository health check (core + language-specific)
    cmds:
      - echo "REPOSITORY HEALTH CHECK REPORT"
      - echo "Running comprehensive health check..."
      - task check
      - echo "Repository health check completed"

  # Multi-environment deployment and setup tasks
  deploy:
    desc: Deploy application (ENV=dev|staging|prod NETWORK=internal|public SERVICE=api)
    cmds:
      - ./scripts/task/deploy.sh {{.ENV | default "dev"}} {{.NETWORK | default "internal"}} {{.SERVICE | default "api"}}

  deploy-all:
    desc: Deploy to all environments
    cmds:
      - ./scripts/task/deploy-all.sh

  setup-repo:
    desc: Bootstrap repository setup
    cmds:
      - echo "Setting up repository..."
      - ./scripts/task/setup-secrets.sh {{.ENV | default "dev"}} {{.NETWORK | default "internal"}} {{.SERVICE | default "api"}}
      - ./scripts/task/setup-environments.sh {{.ENV | default "dev"}} {{.NETWORK | default "internal"}}
      - ./scripts/task/setup-branch-protection.sh
      - echo "Repository setup completed"

  setup-all-envs:
    desc: Setup all defined environments
    cmds:
      - ./scripts/task/setup-all-environments.sh

  list-envs:
    desc: List all defined environments
    cmds:
      - echo "Configured Networks:"
      - |
        {{range .NETWORKS}}
        echo "  - {{.}}"
        {{end}}
      - echo "Configured Environments:"
      - |
        {{range .ENVIRONMENTS}}
        echo "  - {{.}}"
        {{end}}
      - echo "Configured Services:"
      - |
        {{range .SERVICES}}
        echo "  - {{.}}"
        {{end}}
      - echo "All Environment Combinations:"
      - |
        {{range .NETWORKS}}
        {{$network := .}}
        {{range $.ENVIRONMENTS}}
        echo "  - {{$network}}-{{.}}"
        {{end}}
        {{end}}
