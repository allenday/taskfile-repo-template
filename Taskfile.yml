version: '3'

# Modular Taskfile - Core functionality with optional extensions
includes:
  # Core repository health and CI tasks (always included)
  core:
    taskfile: ./taskfiles/Core.yml
    dir: .
  
  # Language and technology-specific extensions (optional)
  python:
    taskfile: ./taskfiles/Python.yml
    optional: true
    aliases: [py]
  
  protobuf:
    taskfile: ./taskfiles/Protobuf.yml
    optional: true
    aliases: [proto, pb]
  
  # Container orchestration (optional)
  container:
    taskfile: ./taskfiles/Container.yml
    optional: true
    aliases: [docker]
  
  # Secret management
  secrets:
    taskfile: ./taskfiles/Secrets.yml
    optional: true
    aliases: [bws]
  
  # Application-specific tasks
  app:
    taskfile: ./taskfiles/App.yml
    aliases: [gitlab]

vars:
  REPO_OWNER:
    sh: ./scripts/task/__taskfile__/detect-repo.sh | grep REPO_OWNER | cut -d= -f2
  REPO_NAME:
    sh: ./scripts/task/__taskfile__/detect-repo.sh | grep REPO_NAME | cut -d= -f2
  SCORECARD_RESULTS: scorecard-results.json
  
  # Environment configuration
  NETWORKS:
    - internal
    - public
  ENVIRONMENTS:
    - dev
    - staging
    - prod
  SERVICES:
    - api
    - gitlab

tasks:
  default:
    desc: List all available tasks across modules
    cmds:
      - task --list

  # Delegate core tasks to the core module
  ci:
    desc: Run CI pipeline locally with act
    cmds:
      - task core:ci

  app-ci:
    desc: Test application workflow locally with act
    cmds:
      - task container:ci-test

  scorecard:
    desc: Run OSSF Scorecard security analysis
    cmds:
      - task core:scorecard

  sync:
    desc: Sync repository references with git remote
    cmds:
      - task core:sync

  init:
    desc: Initialize repository with proper permissions
    cmds:
      - task core:init

  # Composite tasks that work across modules
  setup:
    desc: Setup complete development environment (core + detected languages)
    cmds:
      - task core:setup
      - ./scripts/task/__taskfile__/setup-languages.sh
      - ./scripts/task/__taskfile__/setup-protobuf.sh
      - ./scripts/task/__taskfile__/setup-container.sh
      - echo "Development environment setup completed"

  test:
    desc: Run all available tests (core + language-specific)
    cmds:
      - ./scripts/task/__taskfile__/run-tests.sh

  lint:
    desc: Run all linting tools (core + language-specific)
    cmds:
      - ./scripts/task/__taskfile__/run-linting.sh

  format:
    desc: Format all code (language-specific formatters)
    cmds:
      - ./scripts/task/__taskfile__/format-code.sh

  clean:
    desc: Clean all build artifacts and generated files
    cmds:
      - ./scripts/task/__taskfile__/clean-artifacts.sh {{.SCORECARD_RESULTS}}

  # Health check that includes all modules
  check:
    silent: true
    desc: Run comprehensive checks (core health + language-specific)
    cmds:
      - task core:check-tools
      - task core:scorecard-local
      - ./scripts/task/__taskfile__/run-checks.sh

  # Environment-specific tasks (multi-environment support)
  check-envs-exist:
    desc: Check if GitHub environments exist
    silent: true
    run: when_changed
    sources:
      - Taskfile.yml
    generates:
      - /tmp/task-env-state
    cmds:
      - ./scripts/task/__taskfile__/check-environments-wrapper.sh {{range .NETWORKS}}{{$network := .}}{{range $.ENVIRONMENTS}}{{$network}}-{{.}} {{end}}{{end}}

  check-secrets:
    desc: Check repository and environment secrets
    silent: true
    deps: [check-envs-exist]
    run: when_changed
    sources:
      - /tmp/task-env-state
      - Taskfile.yml
    cmds:
      - ./scripts/task/__taskfile__/check-secrets-wrapper.sh {{range .NETWORKS}}{{$network := .}}{{range $.ENVIRONMENTS}}{{$network}}-{{.}} {{end}}{{end}}

  # Comprehensive health check with modular support
  doctor:
    desc: Complete repository health check (core + language-specific)
    cmds:
      - echo "üè• COMPREHENSIVE REPOSITORY HEALTH CHECK"
      - echo "========================================"
      - echo ""
      - task core:doctor || echo "‚ö†Ô∏è  Core health check found issues (see above)"
      - echo ""
      - task container:doctor 2>/dev/null || echo "‚è≠Ô∏è  Container checks skipped (no container environment detected)"
      - echo ""
      - task python:doctor 2>/dev/null || echo "‚è≠Ô∏è  Python checks skipped (no Python project detected)"
      - echo ""
      - task protobuf:doctor 2>/dev/null || echo "‚è≠Ô∏è  Protobuf checks skipped (no protobuf project detected)"
      - echo ""
      - task secrets:doctor 2>/dev/null || echo "‚è≠Ô∏è  Secrets checks skipped (Bitwarden Secrets not configured)"
      - echo ""
      - echo "üéâ COMPREHENSIVE HEALTH CHECK COMPLETED"
      - echo "========================================"

  # Multi-environment deployment and setup tasks
  deploy:
    desc: Deploy application (ENV=dev|staging|prod NETWORK=internal|public SERVICE=api)
    cmds:
      - ./scripts/task/__taskfile__/deploy.sh {{.ENV | default "dev"}} {{.NETWORK | default "internal"}} {{.SERVICE | default "api"}}

  deploy-all:
    desc: Deploy to all environments
    cmds:
      - ./scripts/task/deploy-all.sh

  setup-repo:
    desc: Bootstrap repository setup
    cmds:
      - echo "Setting up repository..."
      - ./scripts/task/__taskfile__/setup-secrets.sh {{.ENV | default "dev"}} {{.NETWORK | default "internal"}} {{.SERVICE | default "api"}}
      - ./scripts/task/__taskfile__/setup-environments.sh {{.ENV | default "dev"}} {{.NETWORK | default "internal"}}
      - ./scripts/task/__taskfile__/setup-branch-protection.sh
      - echo "Repository setup completed"

  setup-all-envs:
    desc: Setup all defined environments
    cmds:
      - ./scripts/task/setup-all-environments.sh

  list-envs:
    desc: List all defined environments
    cmds:
      - echo "Configured Networks:"
      - |
        {{range .NETWORKS}}
        echo "  - {{.}}"
        {{end}}
      - echo "Configured Environments:"
      - |
        {{range .ENVIRONMENTS}}
        echo "  - {{.}}"
        {{end}}
      - echo "Configured Services:"
      - |
        {{range .SERVICES}}
        echo "  - {{.}}"
        {{end}}
      - echo "All Environment Combinations:"
      - |
        {{range .NETWORKS}}
        {{$network := .}}
        {{range $.ENVIRONMENTS}}
        echo "  - {{$network}}-{{.}}"
        {{end}}
        {{end}}
