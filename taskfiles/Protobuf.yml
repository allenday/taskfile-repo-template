version: '3'

# Protocol Buffers (protobuf) development tasks
# Includes code generation, validation, and multi-language support

vars:
  PROTO_DIR: '{{.PROTO_DIR | default "src/main/proto"}}'
  PROTO_OUT_DIR: '{{.PROTO_OUT_DIR | default "src/generated"}}'
  PROTOC_VERSION: '{{.PROTOC_VERSION | default "25.1"}}'
  
  # Language-specific output directories
  GO_OUT: '{{.GO_OUT | default "src/generated/go"}}'
  PYTHON_OUT: '{{.PYTHON_OUT | default "src/generated/python"}}'
  TS_OUT: '{{.TS_OUT | default "src/generated/typescript"}}'
  JAVA_OUT: '{{.JAVA_OUT | default "src/generated/java"}}'
  CPP_OUT: '{{.CPP_OUT | default "src/generated/cpp"}}'

tasks:
  # Tool installation
  install-protoc:
    desc: Install Protocol Buffers compiler
    status:
      - command -v protoc
    cmds:
      - ./scripts/task/protobuf/install-protoc.sh {{OS}}

  install-grpc-tools:
    desc: Install gRPC tools for various languages
    deps: [install-protoc]
    cmds:
      - echo "Installing gRPC tools..."
      - ./scripts/task/protobuf/install-grpc-tools.sh
      - ./scripts/task/protobuf/install-python-tools.sh
      - ./scripts/task/protobuf/install-nodejs-tools.sh

  # Directory setup
  init-proto:
    desc: Initialize protobuf directory structure
    cmds:
      - mkdir -p {{.PROTO_DIR}}
      - mkdir -p {{.PROTO_OUT_DIR}}
      - mkdir -p {{.GO_OUT}}
      - mkdir -p {{.PYTHON_OUT}}
      - mkdir -p {{.TS_OUT}}
      - mkdir -p {{.JAVA_OUT}}
      - mkdir -p {{.CPP_OUT}}
      - echo "Protobuf directory structure created"

  # Code generation
  gen-go:
    desc: Generate Go code from protobuf files
    deps: [install-protoc, init-proto]
    sources:
      - "{{.PROTO_DIR}}/**/*.proto"
    generates:
      - "{{.GO_OUT}}/**/*.pb.go"
    cmds:
      - ./scripts/task/protobuf/generate-code.sh go {{.PROTO_DIR}} {{.GO_OUT}}

  gen-python:
    desc: Generate Python code from protobuf files
    deps: [install-protoc, init-proto]
    sources:
      - "{{.PROTO_DIR}}/**/*.proto"
    generates:
      - "{{.PYTHON_OUT}}/**/*_pb2.py"
    cmds:
      - ./scripts/task/protobuf/generate-code.sh python {{.PROTO_DIR}} {{.PYTHON_OUT}}

  gen-typescript:
    desc: Generate TypeScript code from protobuf files
    deps: [install-protoc, init-proto]
    sources:
      - "{{.PROTO_DIR}}/**/*.proto"
    generates:
      - "{{.TS_OUT}}/**/*.ts"
    cmds:
      - ./scripts/task/protobuf/generate-code.sh typescript {{.PROTO_DIR}} {{.TS_OUT}}

  gen-java:
    desc: Generate Java code from protobuf files
    deps: [install-protoc, init-proto]
    sources:
      - "{{.PROTO_DIR}}/**/*.proto"
    generates:
      - "{{.JAVA_OUT}}/**/*.java"
    cmds:
      - ./scripts/task/protobuf/generate-code.sh java {{.PROTO_DIR}} {{.JAVA_OUT}}

  gen-cpp:
    desc: Generate C++ code from protobuf files
    deps: [install-protoc, init-proto]
    sources:
      - "{{.PROTO_DIR}}/**/*.proto"
    generates:
      - "{{.CPP_OUT}}/**/*.pb.cc"
      - "{{.CPP_OUT}}/**/*.pb.h"
    cmds:
      - ./scripts/task/protobuf/generate-code.sh cpp {{.PROTO_DIR}} {{.CPP_OUT}}

  gen-all:
    desc: Generate code for all supported languages
    deps: [gen-go, gen-python, gen-typescript, gen-java, gen-cpp]
    cmds:
      - echo "Code generation completed for all languages"

  # Validation and linting
  lint-proto:
    desc: Lint protobuf files using buf
    deps: [install-buf]
    preconditions:
      - test -d {{.PROTO_DIR}}
    cmds:
      - buf lint {{.PROTO_DIR}}

  format-proto:
    desc: Format protobuf files using buf
    deps: [install-buf]
    preconditions:
      - test -d {{.PROTO_DIR}}
    cmds:
      - buf format -w {{.PROTO_DIR}}

  validate-proto:
    desc: Validate protobuf syntax and compatibility
    deps: [install-protoc]
    cmds:
      - ./scripts/task/protobuf/validate-proto.sh {{.PROTO_DIR}}

  # Buf tool installation and setup
  install-buf:
    desc: Install buf protobuf tool
    status:
      - command -v buf
    cmds:
      - ./scripts/task/protobuf/install-buf.sh {{OS}}

  init-buf:
    desc: Initialize buf configuration
    deps: [install-buf]
    generates:
      - buf.yaml
      - buf.gen.yaml
    cmds:
      - ./scripts/task/protobuf/init-buf-config.sh {{.GO_OUT}} {{.PYTHON_OUT}}

  # Documentation
  gen-docs:
    desc: Generate protobuf documentation
    deps: [install-protoc]
    cmds:
      - ./scripts/task/protobuf/generate-docs.sh {{.PROTO_DIR}}

  # Cleanup
  clean-generated:
    desc: Clean all generated protobuf code
    cmds:
      - rm -rf {{.PROTO_OUT_DIR}}
      - echo "Generated protobuf code cleaned"

  clean-all:
    desc: Clean generated code and build artifacts
    deps: [clean-generated]
    cmds:
      - rm -rf docs/
      - echo "All protobuf artifacts cleaned"

  # Development workflow
  watch:
    desc: Watch for protobuf changes and regenerate code
    deps: [gen-all]
    cmds:
      - ./scripts/task/protobuf/watch-changes.sh {{.PROTO_DIR}}

  # Setup and check
  setup-protobuf:
    desc: Complete protobuf development environment setup
    deps: [install-protoc, install-grpc-tools, install-buf, init-proto, init-buf]
    cmds:
      - echo "Protobuf development environment ready"

  doctor:
    desc: Run comprehensive Protocol Buffers development environment health check
    cmds:
      - ./scripts/task/protobuf/doctor.sh

  check-proto:
    desc: Run all protobuf checks (lint, validate, generate)
    deps: [lint-proto, validate-proto, gen-all]
    cmds:
      - echo "All protobuf checks completed successfully"