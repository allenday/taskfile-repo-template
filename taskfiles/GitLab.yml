version: '3'

vars:
  GITLAB_URL: 'http://localhost'
  GITLAB_API_URL: '{{.GITLAB_URL}}/api/v4'

tasks:
  # GitLab post-deployment setup and testing tasks
  get-root-password:
    desc: Get initial GitLab root password
    dir: deploy
    cmds:
      - echo "Extracting GitLab root password..."
      - |
        if docker compose ps | grep -q "gitlab.*healthy"; then
          echo "GitLab container is healthy, extracting password..."
          docker compose exec gitlab grep 'Password:' /etc/gitlab/initial_root_password 2>/dev/null || echo "Password file not found - may need to wait longer for initialization"
        else
          echo "GitLab container not healthy yet, please wait and try again"
          docker compose ps gitlab
        fi

  wait-ready:
    desc: Wait for GitLab to be fully ready
    dir: deploy
    cmds:
      - echo "Waiting for GitLab to be fully ready..."
      - |
        max_attempts=30
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          if curl -s -o /dev/null -w "%{http_code}" {{.GITLAB_URL}} | grep -q "200\|302"; then
            echo "GitLab is responding (attempt $attempt/$max_attempts)"
            break
          else
            echo "GitLab not ready yet (attempt $attempt/$max_attempts), waiting 10s..."
            sleep 10
            attempt=$((attempt + 1))
          fi
        done
        if [ $attempt -gt $max_attempts ]; then
          echo "GitLab failed to become ready after $max_attempts attempts"
          exit 1
        fi
        echo "GitLab is now ready!"

  setup:
    desc: Complete GitLab post-deployment setup
    deps: [wait-ready]
    dir: deploy
    cmds:
      - echo "Running GitLab post-deployment setup..."
      - task: get-root-password
      - echo ""
      - echo "GitLab Setup Complete!"
      - echo "Access GitLab at: {{.GITLAB_URL}}"
      - echo "Username: root"
      - echo "Password: (see above)"
      - echo ""
      - echo "Next steps:"
      - echo "1. Login to GitLab and change the root password"
      - echo "2. Create a Personal Access Token for API testing"
      - echo "3. Run 'task gitlab:test GITLAB_TOKEN=your-token' to verify functionality"

  test:
    desc: Test GitLab API functionality
    dir: deploy
    cmds:
      - echo "Testing GitLab API functionality..."
      - |
        if [ -z "{{.GITLAB_TOKEN}}" ]; then
          echo "Please provide a GitLab Personal Access Token:"
          echo "Usage: task gitlab:test GITLAB_TOKEN=your-token-here"
          echo ""
          echo "To create a token:"
          echo "1. Login to GitLab at {{.GITLAB_URL}}"
          echo "2. Go to User Settings > Access Tokens"
          echo "3. Create a token with 'api' scope"
          exit 1
        fi
      - echo "Testing GitLab API with provided token..."
      - |
        # Test API health
        echo "1. Testing API health..."
        if curl -s -H "PRIVATE-TOKEN: {{.GITLAB_TOKEN}}" {{.GITLAB_API_URL}}/version | jq -r '.version' 2>/dev/null; then
          echo "‚úÖ GitLab API is responding"
        else
          echo "‚ùå GitLab API not responding or invalid token"
          exit 1
        fi
      - |
        # Test creating a project
        echo "2. Testing project creation..."
        project_name="test-project-$(date +%s)"
        project_response=$(curl -s -X POST \
          -H "PRIVATE-TOKEN: {{.GITLAB_TOKEN}}" \
          -H "Content-Type: application/json" \
          -d "{\"name\":\"$project_name\",\"visibility\":\"private\"}" \
          {{.GITLAB_API_URL}}/projects)
        
        if echo "$project_response" | jq -r '.id' >/dev/null 2>&1; then
          project_id=$(echo "$project_response" | jq -r '.id')
          echo "‚úÖ Created test project: $project_name (ID: $project_id)"
          
          # Clean up - delete the test project
          echo "3. Cleaning up test project..."
          if curl -s -X DELETE -H "PRIVATE-TOKEN: {{.GITLAB_TOKEN}}" {{.GITLAB_API_URL}}/projects/$project_id | grep -q '202'; then
            echo "‚úÖ Test project cleaned up successfully"
          else
            echo "‚ö†Ô∏è Could not clean up test project (ID: $project_id)"
          fi
        else
          echo "‚ùå Failed to create test project"
          echo "$project_response"
          exit 1
        fi
      - echo "üéâ GitLab integration tests passed!"

  create-token-guide:
    desc: Guide for creating a test Personal Access Token
    cmds:
      - echo "To create a GitLab Personal Access Token for testing:"
      - echo ""
      - echo "1. Open GitLab: {{.GITLAB_URL}}"
      - echo "2. Login as root with the password from 'task gitlab:get-root-password'"
      - echo "3. Go to: User Settings (top-right menu) > Access Tokens"
      - echo "4. Create a new token with these settings:"
      - echo "   - Name: 'Testing Token'"
      - echo "   - Expires at: (optional)"
      - echo "   - Scopes: Check 'api' and 'read_api'"
      - echo "5. Copy the generated token"
      - echo "6. Test with: task gitlab:test GITLAB_TOKEN=your-token-here"

  status:
    desc: Check GitLab deployment status and health
    dir: deploy
    cmds:
      - echo "GitLab Deployment Status:"
      - echo "========================"
      - docker compose ps gitlab
      - echo ""
      - echo "GitLab Health Check:"
      - |
        if curl -s -o /dev/null -w "%{http_code}" {{.GITLAB_URL}} | grep -q "200\|302"; then
          echo "‚úÖ GitLab web interface is accessible at {{.GITLAB_URL}}"
        else
          echo "‚ùå GitLab web interface not responding at {{.GITLAB_URL}}"
        fi
      - echo ""
      - echo "Quick setup: task gitlab:setup"
      - echo "Full test: task gitlab:test GITLAB_TOKEN=your-token"